// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gremlin_eye.Server.Data;

#nullable disable

namespace gremlin_eye.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250425212010_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyDataGameData", b =>
                {
                    b.Property<long>("CompaniesCompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("GamesGameId")
                        .HasColumnType("bigint");

                    b.HasKey("CompaniesCompanyId", "GamesGameId");

                    b.HasIndex("GamesGameId");

                    b.ToTable("CompanyDataGameData");
                });

            modelBuilder.Entity("GameDataGenreData", b =>
                {
                    b.Property<long>("GamesGameId")
                        .HasColumnType("bigint");

                    b.Property<long>("GenresGenreId")
                        .HasColumnType("bigint");

                    b.HasKey("GamesGameId", "GenresGenreId");

                    b.HasIndex("GenresGenreId");

                    b.ToTable("GameDataGenreData");
                });

            modelBuilder.Entity("GameDataPlatformData", b =>
                {
                    b.Property<long>("GamesGameId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlatformsPlatformId")
                        .HasColumnType("bigint");

                    b.HasKey("GamesGameId", "PlatformsPlatformId");

                    b.HasIndex("PlatformsPlatformId");

                    b.ToTable("GameDataPlatformData");
                });

            modelBuilder.Entity("GameDataSeries", b =>
                {
                    b.Property<long>("GamesGameId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesId")
                        .HasColumnType("bigint");

                    b.HasKey("GamesGameId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("GameDataSeries");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.CompanyData", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.HasKey("CompanyId");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GameData", b =>
                {
                    b.Property<long>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GameId"));

                    b.Property<string>("BannerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("banner_uri");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_uri");

                    b.Property<string>("GameStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("game_status");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("game_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<DateTimeOffset?>("ReleaseDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("release_date");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.HasKey("GameId");

                    b.HasIndex("ParentId");

                    b.ToTable("games");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GameLike", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("like_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LikeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<string>("GameSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("game_slug");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("LikeId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("game_likes");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GameLog", b =>
                {
                    b.Property<long>("GameLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("game_log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GameLogId"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsBacklog")
                        .HasColumnType("bit")
                        .HasColumnName("is_backlog");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("bit")
                        .HasColumnName("is_played");

                    b.Property<bool>("IsPlaying")
                        .HasColumnType("bit")
                        .HasColumnName("is_playing");

                    b.Property<bool>("IsWishlist")
                        .HasColumnType("bit")
                        .HasColumnName("is_wishlist");

                    b.Property<int?>("PlayStatus")
                        .HasColumnType("int")
                        .HasColumnName("play_status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("GameLogId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("game_logs");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GenreData", b =>
                {
                    b.Property<long>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.HasKey("GenreId");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ListEntry", b =>
                {
                    b.Property<long>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("entry_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EntryId"));

                    b.Property<string>("EntryNote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("entry_note");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<long>("ListingId")
                        .HasColumnType("bigint")
                        .HasColumnName("listing_id");

                    b.HasKey("EntryId");

                    b.HasIndex("GameId");

                    b.HasIndex("ListingId");

                    b.ToTable("ListEntries");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Listing", b =>
                {
                    b.Property<long>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("listing_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ListingId"));

                    b.Property<bool>("CommentsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("comments_locked");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<bool>("isDesc")
                        .HasColumnType("bit")
                        .HasColumnName("is_desc");

                    b.Property<bool>("isGrid")
                        .HasColumnType("bit")
                        .HasColumnName("is_grid");

                    b.Property<bool>("isRanked")
                        .HasColumnType("bit")
                        .HasColumnName("is_ranked");

                    b.HasKey("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("listings");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ListingComment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"));

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment_body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("ListingId")
                        .HasColumnType("bigint")
                        .HasColumnName("listing_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ListingId");

                    b.ToTable("listing_comments");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ListingLike", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("like_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LikeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("ListingId")
                        .HasColumnType("bigint")
                        .HasColumnName("listing_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("LikeId");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("listing_likes");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.PlatformData", b =>
                {
                    b.Property<long>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("platform_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PlatformId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.HasKey("PlatformId");

                    b.ToTable("platforms");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.PlayLog", b =>
                {
                    b.Property<long>("PlayLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("play_log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PlayLogId"));

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit")
                        .HasColumnName("is_end");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit")
                        .HasColumnName("is_start");

                    b.Property<DateOnly>("LogDate")
                        .HasColumnType("date")
                        .HasColumnName("log_date");

                    b.Property<string>("LogNote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("log_note");

                    b.Property<TimeSpan?>("LogTime")
                        .HasColumnType("time")
                        .HasColumnName("log_time");

                    b.Property<long>("PlaythroughId")
                        .HasColumnType("bigint")
                        .HasColumnName("playthrough_id");

                    b.HasKey("PlayLogId");

                    b.HasIndex("PlaythroughId");

                    b.ToTable("play_logs");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Playthrough", b =>
                {
                    b.Property<long>("PlaythroughId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("playthrough_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PlaythroughId"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<long>("GameLogId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_log_id");

                    b.Property<bool>("IsMastered")
                        .HasColumnType("bit")
                        .HasColumnName("is_mastered");

                    b.Property<bool>("IsReplay")
                        .HasColumnType("bit")
                        .HasColumnName("is_replay");

                    b.Property<string>("LogTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("log_title");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("medium");

                    b.Property<long?>("PlatformId")
                        .HasColumnType("bigint")
                        .HasColumnName("played_on");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<bool>("ReviewSpoilers")
                        .HasColumnType("bit")
                        .HasColumnName("review_spoilers");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review");

                    b.Property<TimeSpan?>("TimePlayed")
                        .HasColumnType("time")
                        .HasColumnName("time_played");

                    b.HasKey("PlaythroughId");

                    b.HasIndex("GameId");

                    b.HasIndex("GameLogId");

                    b.HasIndex("PlatformId");

                    b.ToTable("playthroughs");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.RefreshToken", b =>
                {
                    b.Property<long>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TokenId"));

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Review", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReviewId"));

                    b.Property<bool>("CommentsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("comments_locked");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<long>("PlaythroughId")
                        .HasColumnType("bigint")
                        .HasColumnName("playthrough_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlaythroughId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ReviewComment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"));

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment_body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewId");

                    b.ToTable("review_comments");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ReviewLike", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("like_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LikeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("LikeId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("review_likes");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Series", b =>
                {
                    b.Property<long>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("series_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeriesId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.HasKey("SeriesId");

                    b.ToTable("game_series");
                });

            modelBuilder.Entity("CompanyDataGameData", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.CompanyData", null)
                        .WithMany()
                        .HasForeignKey("CompaniesCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.GameData", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameDataGenreData", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.GenreData", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameDataPlatformData", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.PlatformData", null)
                        .WithMany()
                        .HasForeignKey("PlatformsPlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameDataSeries", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GameData", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GameLike", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", "Game")
                        .WithMany("Likes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "User")
                        .WithMany("GameLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GameLog", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", "Game")
                        .WithMany("GameLogs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "User")
                        .WithMany("GameLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ListEntry", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", "Game")
                        .WithMany("ListEntries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.Listing", "Listing")
                        .WithMany("ListEntries")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Listing", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ListingComment", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "Author")
                        .WithMany("ListingComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.Listing", "Listing")
                        .WithMany("Comments")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ListingLike", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.Listing", "Listing")
                        .WithMany("Likes")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "User")
                        .WithMany("ListingLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.PlayLog", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.Playthrough", "Playthrough")
                        .WithMany("PlayLogs")
                        .HasForeignKey("PlaythroughId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playthrough");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Playthrough", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", "Game")
                        .WithMany("Playthroughs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.GameLog", "GameLog")
                        .WithMany("Playthroughs")
                        .HasForeignKey("GameLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.PlatformData", "Platform")
                        .WithMany("Playthroughs")
                        .HasForeignKey("PlatformId");

                    b.Navigation("Game");

                    b.Navigation("GameLog");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.RefreshToken", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Review", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.GameData", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.Playthrough", "Playthrough")
                        .WithOne("Review")
                        .HasForeignKey("gremlin_eye.Server.Entity.Review", "PlaythroughId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Playthrough");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ReviewComment", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "Author")
                        .WithMany("ReviewComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.ReviewLike", b =>
                {
                    b.HasOne("gremlin_eye.Server.Entity.Review", "Review")
                        .WithMany("Likes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gremlin_eye.Server.Entity.AppUser", "User")
                        .WithMany("ReviewLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.AppUser", b =>
                {
                    b.Navigation("GameLikes");

                    b.Navigation("GameLogs");

                    b.Navigation("ListingComments");

                    b.Navigation("ListingLikes");

                    b.Navigation("Listings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReviewComments");

                    b.Navigation("ReviewLikes");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GameData", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("GameLogs");

                    b.Navigation("Likes");

                    b.Navigation("ListEntries");

                    b.Navigation("Playthroughs");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.GameLog", b =>
                {
                    b.Navigation("Playthroughs");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Listing", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("ListEntries");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.PlatformData", b =>
                {
                    b.Navigation("Playthroughs");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Playthrough", b =>
                {
                    b.Navigation("PlayLogs");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("gremlin_eye.Server.Entity.Review", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
